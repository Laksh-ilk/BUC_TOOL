name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: buc
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        cd FastAPI-Database
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Run backend tests
      run: |
        cd FastAPI-Database
        python -m pytest tests/ -v --tb=short
      env:
        DB_HOST: localhost
        DB_USER: root
        DB_PASSWORD: root
        DB_NAME: buc

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: react-admin/package-lock.json
    
    - name: Install dependencies
      run: |
        cd react-admin
        npm ci --legacy-peer-deps
    
    - name: Run frontend tests
      run: |
        cd react-admin
        npm test -- --watchAll=false --coverage --passWithNoTests

  build-docker:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build backend image
      run: |
        cd FastAPI-Database
        docker build -t buc-backend:${{ github.sha }} .
    
    - name: Build frontend image
      run: |
        cd react-admin
        docker build -t buc-frontend:${{ github.sha }} .
    
    - name: Test Docker images
      run: |
        docker run --rm buc-backend:${{ github.sha }} python -c "import main; print('Backend image test passed')"
        docker run --rm buc-frontend:${{ github.sha }} nginx -t

  security-scan:
    runs-on: ubuntu-latest
    needs: [build-docker]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build backend image for scanning
      run: |
        cd FastAPI-Database
        docker build -t buc-backend:${{ github.sha }} .
    
    - name: Build frontend image for scanning
      run: |
        cd react-admin
        docker build -t buc-frontend:${{ github.sha }} .
    
    - name: Run Trivy vulnerability scanner on backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'buc-backend:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-backend-results.sarif'
    
    - name: Run Trivy vulnerability scanner on frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'buc-frontend:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-backend-results.sarif') != ''
      with:
        sarif_file: 'trivy-backend-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-frontend-results.sarif') != ''
      with:
        sarif_file: 'trivy-frontend-results.sarif' 